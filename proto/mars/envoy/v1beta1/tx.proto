syntax = "proto3";
package mars.envoy.v1beta1;

option go_package = "github.com/mars-protocol/hub/x/envoy/types";

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

// Msg defines the module's gRPC message service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // RegisterAccount creates a new interchain account on the given connection,
  // or if an interchain account already exists but its channel is closed (due
  // to a packet having timed out), open a new channel for this account.
  rpc RegisterAccount(MsgRegisterAccount) returns (MsgRegisterAccountResponse);

  // SendFunds is a governance operation for sending funds to an interchain
  // account via ICS-20.
  //
  // The envoy module will first attempt to use the balance held in its own
  // module account. If the balance is not sufficient, it will attempt to draw
  // the difference from the community pool.
  rpc SendFunds(MsgSendFunds) returns (MsgSendFundsResponse);

  // SendMessages is a governance operation for sending one or more messages to
  // the host chain to be executed by the interchain account.
  rpc SendMessages(MsgSendMessages) returns (MsgSendMessagesResponse);
}

//------------------------------------------------------------------------------
// RegisterAccount
//------------------------------------------------------------------------------

// MsgRegisterAccount is the request type for the Msg/RegisterAccount RPC method.
message MsgRegisterAccount {
  option (cosmos.msg.v1.signer) = "sender";

  // Sender is the account executing this message.
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // ConnectionId identifies the connection on which the interchain account is
  // to be registered.
  string connection_id = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];
}

// MsgRegisterAccountResponse is the response type for the Msg/RegisterAccount
// RPC method.
message MsgRegisterAccountResponse {}

//------------------------------------------------------------------------------
// SendFunds
//------------------------------------------------------------------------------

// MsgSendFunds is the request type for the Msg/SendFunds RPC method.
//
// This message is typically executed via a governance proposal with the gov
// module being the executing authority.
//
// We do not need to specify the recipient address in this message, as it can be
// deduced from the channel id.
message MsgSendFunds {
  option (cosmos.msg.v1.signer) = "authority";

  // Authority is the account executing this message.
  // It is typically the x/gov module account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // ChannelId identifies the channel through which the transfer is to be sent.
  //
  // Unlike other messages of this module which only requires specifying the
  // connection id, we have to specify the channel id here, because there can be
  // multiple transfer channels associated with the same connection.
  string channel_id = 2 [(gogoproto.moretags) = "yaml:\"channel_id\""];

  // Amount is the coins that are to be sent.
  //
  // Here we support multiple coins in one proposal. As ICS-20 specs only allow
  // one denom per packet, we will have one packet per denom.
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgSendFundsResponse is the respones type for the Msg/SendFunds RPC method.
message MsgSendFundsResponse {}

//------------------------------------------------------------------------------
// SendMessages
//------------------------------------------------------------------------------

// MsgSendMessages is the request type for the Msg/SendMessages RPC method.
//
// This message is typically executed via a governance proposal with the gov
// module being the executing authority.
message MsgSendMessages {
  option (cosmos.msg.v1.signer) = "authority";

  // Authority is the account executing this message.
  // It is typically the x/gov module account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // ConnectionId identifies the connection through which the messages are to
  // be sent.
  string connection_id = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];

  // Messages is an array of one or more messages that are to be executed by the
  // interchain account.
  repeated google.protobuf.Any messages = 3;
}

// MsgSendMessagesResponse is the response type for the Msg/SendMessages RPC
// method.
message MsgSendMessagesResponse {}
