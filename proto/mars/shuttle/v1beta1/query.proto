syntax = "proto3";
package mars.shuttle.v1beta1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "mars/shuttle/v1beta1/params.proto";

option go_package = "github.com/mars-protocol/hub/x/shuttle/types";

// Query defines the gRPC querier service for the shuttle module
service Query {
  // Params queries the module's parameters
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/mars/shuttle/v1beta1/params";
  }

  // Account queries the interchain account registered at the specified connection
  rpc Account(QueryAccountRequest) returns (QueryAccountResponse) {
    option (google.api.http).get = "/mars/shuttle/v1beta1/account/{connection_id}";
  }

  // Accounts queries interchain accounts registered at all connections
  rpc Accounts(QueryAccountsRequest) returns (QueryAccountsResponse) {
    option (google.api.http).get = "/mars/shuttle/v1beta1/accounts";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method
message QueryParamsResponse {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // Params is the module's parameters
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryAccountRequest is the request type for the Query/Account RPC method
message QueryAccountRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // ConnectionId is the identifier of an IBC connection
  string connection_id = 1 [(gogoproto.moretags) = "yaml:\"connection_id\""];
}

// QueryAccountResponse is the response type for the Query/Account RPC method
message QueryAccountResponse {
  // ChannelId is the identifier of the channel
  string channel_id = 1 [(gogoproto.moretags) = "yaml:\"channel_id\""];

  // Address is the address of the interchain account registered at the specified connection
  string address = 2;
}

// QueryAccountsRequest is the request type for the Query/Accounts RPC method
message QueryAccountsRequest {}

// QueryAccountsResponse is the response type for the Query/Accounts RPC method
message QueryAccountsResponse {
  // Accounts are the connections IDs and their respective interchain account address
  repeated QueryAccountsResponseItem accounts = 1 [(gogoproto.nullable) = false];
}

// QueryAccountsResponseItem represents one interchain account registered at a connection ID.
// Used as a repeating item in QueryAccountsResponse
message QueryAccountsResponseItem {
  // ConnectionId is the identifier of the connection at which the interchain account is registered
  string connection_id = 1 [(gogoproto.moretags) = "yaml:\"connection_id\""];

  // ChannelId is the identifier of the channel
  string channel_id = 2 [(gogoproto.moretags) = "yaml:\"channel_id\""];

  // Address is the address of the interchain account
  string address = 3;
}
