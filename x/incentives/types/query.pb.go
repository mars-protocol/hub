// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mars/incentives/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryProgramRequest is the request type for the Query/Program RPC method
type QueryProgramRequest struct {
	// ID is the identifier of the incentives program to be queried
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryProgramRequest) Reset()         { *m = QueryProgramRequest{} }
func (m *QueryProgramRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProgramRequest) ProtoMessage()    {}
func (*QueryProgramRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5ccb4babaf29c00, []int{0}
}
func (m *QueryProgramRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramRequest.Merge(m, src)
}
func (m *QueryProgramRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramRequest proto.InternalMessageInfo

// QueryProgramResponse is the response type for the Query/Program RPC method
type QueryProgramResponse struct {
	// Program is the parameters of the incentives program
	Program Program `protobuf:"bytes,1,opt,name=program,proto3" json:"program"`
}

func (m *QueryProgramResponse) Reset()         { *m = QueryProgramResponse{} }
func (m *QueryProgramResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProgramResponse) ProtoMessage()    {}
func (*QueryProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5ccb4babaf29c00, []int{1}
}
func (m *QueryProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramResponse.Merge(m, src)
}
func (m *QueryProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramResponse proto.InternalMessageInfo

func (m *QueryProgramResponse) GetProgram() Program {
	if m != nil {
		return m.Program
	}
	return Program{}
}

// QueryProgramsRequest is the request type for the Query/Programs RPC method
type QueryProgramsRequest struct {
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryProgramsRequest) Reset()         { *m = QueryProgramsRequest{} }
func (m *QueryProgramsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProgramsRequest) ProtoMessage()    {}
func (*QueryProgramsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5ccb4babaf29c00, []int{2}
}
func (m *QueryProgramsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramsRequest.Merge(m, src)
}
func (m *QueryProgramsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramsRequest proto.InternalMessageInfo

// QueryProgramResponse is the response type for the Query/Programs RPC method
type QueryProgramsResponse struct {
	// Program is the parameters of the incentives program
	Programs []Program `protobuf:"bytes,1,rep,name=programs,proto3" json:"programs"`
}

func (m *QueryProgramsResponse) Reset()         { *m = QueryProgramsResponse{} }
func (m *QueryProgramsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProgramsResponse) ProtoMessage()    {}
func (*QueryProgramsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5ccb4babaf29c00, []int{3}
}
func (m *QueryProgramsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProgramsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProgramsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProgramsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProgramsResponse.Merge(m, src)
}
func (m *QueryProgramsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProgramsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProgramsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProgramsResponse proto.InternalMessageInfo

func (m *QueryProgramsResponse) GetPrograms() []Program {
	if m != nil {
		return m.Programs
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryProgramRequest)(nil), "mars.hub.incentives.v1.QueryProgramRequest")
	proto.RegisterType((*QueryProgramResponse)(nil), "mars.hub.incentives.v1.QueryProgramResponse")
	proto.RegisterType((*QueryProgramsRequest)(nil), "mars.hub.incentives.v1.QueryProgramsRequest")
	proto.RegisterType((*QueryProgramsResponse)(nil), "mars.hub.incentives.v1.QueryProgramsResponse")
}

func init() { proto.RegisterFile("mars/incentives/v1/query.proto", fileDescriptor_b5ccb4babaf29c00) }

var fileDescriptor_b5ccb4babaf29c00 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x3f, 0x6f, 0xd4, 0x30,
	0x1c, 0x8d, 0x8f, 0x3f, 0x3d, 0x19, 0xc1, 0x60, 0x0a, 0xaa, 0xa2, 0xca, 0x39, 0x05, 0x84, 0x2a,
	0xa0, 0xb6, 0x52, 0x36, 0x16, 0x44, 0x07, 0x24, 0xb6, 0x92, 0x05, 0xa9, 0x9b, 0x93, 0xb3, 0x7c,
	0x96, 0x9a, 0x38, 0x8d, 0x9d, 0x88, 0x0a, 0xb1, 0x30, 0xb1, 0x80, 0x90, 0xf8, 0x02, 0x1d, 0xf9,
	0x28, 0x1d, 0x2b, 0xb1, 0x30, 0x21, 0x74, 0xc7, 0xc0, 0xc7, 0x40, 0x71, 0x1c, 0x9a, 0x43, 0xa1,
	0xca, 0x66, 0xd9, 0xef, 0xbd, 0xdf, 0x7b, 0xef, 0x67, 0x88, 0x33, 0x56, 0x6a, 0x2a, 0xf3, 0x94,
	0xe7, 0x46, 0xd6, 0x5c, 0xd3, 0x3a, 0xa2, 0xc7, 0x15, 0x2f, 0x4f, 0x48, 0x51, 0x2a, 0xa3, 0xd0,
	0xdd, 0xe6, 0x9d, 0x2c, 0xaa, 0x84, 0x5c, 0x60, 0x48, 0x1d, 0xf9, 0x0f, 0x53, 0xa5, 0x33, 0xa5,
	0x69, 0xc2, 0x34, 0x6f, 0x09, 0xb4, 0x8e, 0x12, 0x6e, 0x58, 0x44, 0x0b, 0x26, 0x64, 0xce, 0x8c,
	0x54, 0x79, 0xab, 0xe1, 0x6f, 0x0a, 0x25, 0x94, 0x3d, 0xd2, 0xe6, 0xe4, 0x6e, 0xb7, 0x85, 0x52,
	0xe2, 0x88, 0x53, 0x56, 0x48, 0xca, 0xf2, 0x5c, 0x19, 0x4b, 0xd1, 0xee, 0xf5, 0xde, 0x80, 0xaf,
	0x9e, 0x03, 0x0b, 0x0a, 0x29, 0xbc, 0xfd, 0xaa, 0x19, 0x7d, 0x50, 0x2a, 0x51, 0xb2, 0x2c, 0xe6,
	0xc7, 0x15, 0xd7, 0x06, 0xdd, 0x82, 0x13, 0x39, 0xdf, 0x02, 0x33, 0xb0, 0x73, 0x33, 0x9e, 0xc8,
	0xf9, 0xd3, 0xe9, 0x87, 0xd3, 0xc0, 0xfb, 0x7d, 0x1a, 0x78, 0xe1, 0x6b, 0xb8, 0xb9, 0x4e, 0xd0,
	0x85, 0xca, 0x35, 0x47, 0xcf, 0xe0, 0x46, 0xd1, 0x5e, 0x59, 0xda, 0x8d, 0xbd, 0x80, 0x0c, 0xe7,
	0x26, 0x8e, 0xb9, 0x7f, 0xf5, 0xec, 0x47, 0xe0, 0xc5, 0x1d, 0x2b, 0x5c, 0xac, 0x0b, 0xeb, 0xce,
	0xca, 0x0b, 0x08, 0x2f, 0xea, 0x70, 0xda, 0x0f, 0x48, 0xdb, 0x1d, 0x69, 0xba, 0x23, 0x6d, 0xd9,
	0xae, 0x3b, 0x72, 0xc0, 0x04, 0x77, 0xdc, 0xb8, 0xc7, 0xec, 0x45, 0x38, 0x84, 0x77, 0xfe, 0x99,
	0xe4, 0x32, 0x3c, 0x87, 0x53, 0xe7, 0x46, 0x6f, 0x81, 0xd9, 0x95, 0xf1, 0x21, 0xfe, 0xd2, 0xf6,
	0xbe, 0x4e, 0xe0, 0x35, 0x2b, 0x8e, 0x3e, 0x01, 0xb8, 0xe1, 0x50, 0xe8, 0xd1, 0xff, 0x64, 0x06,
	0xba, 0xf7, 0x1f, 0x8f, 0x03, 0xb7, 0x9e, 0xc3, 0x9d, 0xf7, 0xdf, 0x7e, 0x7d, 0x99, 0x84, 0x68,
	0x46, 0x07, 0xd6, 0xed, 0x6c, 0xd1, 0xb7, 0x72, 0xfe, 0x0e, 0x7d, 0x04, 0x70, 0xda, 0x45, 0x46,
	0xa3, 0x86, 0x74, 0x3b, 0xf0, 0x77, 0x47, 0xa2, 0x9d, 0xa7, 0xfb, 0xd6, 0x13, 0x46, 0xdb, 0x97,
	0x78, 0xd2, 0xfb, 0x2f, 0xcf, 0x96, 0x18, 0x9c, 0x2f, 0x31, 0xf8, 0xb9, 0xc4, 0xe0, 0xf3, 0x0a,
	0x7b, 0xe7, 0x2b, 0xec, 0x7d, 0x5f, 0x61, 0xef, 0x90, 0x0a, 0x69, 0x9a, 0x59, 0xa9, 0xca, 0xac,
	0xc2, 0xae, 0xfd, 0xab, 0xa9, 0x3a, 0xa2, 0x8b, 0x2a, 0xa1, 0x6f, 0xfa, 0x82, 0xe6, 0xa4, 0xe0,
	0x3a, 0xb9, 0x6e, 0x01, 0x4f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x9e, 0xd6, 0xec, 0x8b,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Program queries the release schedule of an incentives program
	Program(ctx context.Context, in *QueryProgramRequest, opts ...grpc.CallOption) (*QueryProgramResponse, error)
	// Programs queries the release schedules of all incentives programs
	Programs(ctx context.Context, in *QueryProgramsRequest, opts ...grpc.CallOption) (*QueryProgramsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Program(ctx context.Context, in *QueryProgramRequest, opts ...grpc.CallOption) (*QueryProgramResponse, error) {
	out := new(QueryProgramResponse)
	err := c.cc.Invoke(ctx, "/mars.hub.incentives.v1.Query/Program", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Programs(ctx context.Context, in *QueryProgramsRequest, opts ...grpc.CallOption) (*QueryProgramsResponse, error) {
	out := new(QueryProgramsResponse)
	err := c.cc.Invoke(ctx, "/mars.hub.incentives.v1.Query/Programs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Program queries the release schedule of an incentives program
	Program(context.Context, *QueryProgramRequest) (*QueryProgramResponse, error)
	// Programs queries the release schedules of all incentives programs
	Programs(context.Context, *QueryProgramsRequest) (*QueryProgramsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Program(ctx context.Context, req *QueryProgramRequest) (*QueryProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Program not implemented")
}
func (*UnimplementedQueryServer) Programs(ctx context.Context, req *QueryProgramsRequest) (*QueryProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Programs not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Program_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Program(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mars.hub.incentives.v1.Query/Program",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Program(ctx, req.(*QueryProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Programs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Programs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mars.hub.incentives.v1.Query/Programs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Programs(ctx, req.(*QueryProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mars.hub.incentives.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Program",
			Handler:    _Query_Program_Handler,
		},
		{
			MethodName: "Programs",
			Handler:    _Query_Programs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mars/incentives/v1/query.proto",
}

func (m *QueryProgramRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Program.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProgramsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProgramsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProgramsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProgramsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for iNdEx := len(m.Programs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Programs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryProgramRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Program.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProgramsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProgramsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Programs) > 0 {
		for _, e := range m.Programs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryProgramRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Program", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Program.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProgramsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProgramsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProgramsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProgramsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Programs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Programs = append(m.Programs, Program{})
			if err := m.Programs[len(m.Programs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
