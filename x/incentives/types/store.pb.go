// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mars/incentives/v1/store.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Schedule defines the parameters of an incentives releasing schedule
type Schedule struct {
	// Id is the identifier of this incentives schedule
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// StartTime is the UNIX timestamp of which this incentives schedule shall begin
	StartTime time.Time `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	// EndTime is the UNIX timestamp of which this incentives schedule shall finish
	EndTime time.Time `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	// TotalAmount is the total amount of coins that shall be released to stakers throughout the span of this incentives schedule
	TotalAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=total_amount,json=totalAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_amount" yaml:"total_amount"`
	// ReleasedAmount is the amount of coins that have already been released to the stakers as part of this incentives schedule
	ReleasedAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=released_amount,json=releasedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"released_amount" yaml:"released_amount"`
}

func (m *Schedule) Reset()         { *m = Schedule{} }
func (m *Schedule) String() string { return proto.CompactTextString(m) }
func (*Schedule) ProtoMessage()    {}
func (*Schedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9ddf9eef4481885, []int{0}
}
func (m *Schedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Schedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Schedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Schedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schedule.Merge(m, src)
}
func (m *Schedule) XXX_Size() int {
	return m.Size()
}
func (m *Schedule) XXX_DiscardUnknown() {
	xxx_messageInfo_Schedule.DiscardUnknown(m)
}

var xxx_messageInfo_Schedule proto.InternalMessageInfo

func (m *Schedule) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Schedule) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Schedule) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *Schedule) GetTotalAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalAmount
	}
	return nil
}

func (m *Schedule) GetReleasedAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ReleasedAmount
	}
	return nil
}

func init() {
	proto.RegisterType((*Schedule)(nil), "mars.hub.incentives.v1.Schedule")
}

func init() { proto.RegisterFile("mars/incentives/v1/store.proto", fileDescriptor_c9ddf9eef4481885) }

var fileDescriptor_c9ddf9eef4481885 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x31, 0xae, 0xd3, 0x30,
	0x1c, 0xc6, 0xe3, 0xf6, 0x01, 0x0f, 0x17, 0xb5, 0x22, 0xa0, 0xaa, 0x14, 0xe1, 0x54, 0x99, 0xb2,
	0xd4, 0x56, 0xca, 0xc6, 0x46, 0x19, 0x10, 0x8c, 0x81, 0x01, 0xb1, 0x54, 0x4e, 0x62, 0x52, 0x8b,
	0x24, 0xae, 0x62, 0x27, 0xa2, 0x07, 0x60, 0x45, 0x3d, 0x07, 0x27, 0xe9, 0xd8, 0x91, 0xa9, 0x85,
	0xf6, 0x06, 0x9c, 0x00, 0xc5, 0x4e, 0xd4, 0x8a, 0xa5, 0x7a, 0x53, 0x1c, 0xe7, 0xff, 0xfb, 0xe5,
	0xd3, 0x67, 0x43, 0x94, 0xd1, 0x42, 0x12, 0x9e, 0x47, 0x2c, 0x57, 0xbc, 0x62, 0x92, 0x54, 0x3e,
	0x91, 0x4a, 0x14, 0x0c, 0xaf, 0x0a, 0xa1, 0x84, 0x3d, 0xac, 0xbf, 0xe3, 0x65, 0x19, 0xe2, 0xf3,
	0x0c, 0xae, 0xfc, 0x31, 0x8a, 0x84, 0xcc, 0x84, 0x24, 0x21, 0x95, 0x8c, 0x54, 0x7e, 0xc8, 0x14,
	0xf5, 0x49, 0x24, 0x78, 0x6e, 0xb8, 0xf1, 0xd3, 0x44, 0x24, 0x42, 0x2f, 0x49, 0xbd, 0x6a, 0x76,
	0x9d, 0x44, 0x88, 0x24, 0x65, 0x44, 0xbf, 0x85, 0xe5, 0x17, 0xa2, 0x78, 0xc6, 0xa4, 0xa2, 0xd9,
	0xca, 0x0c, 0xb8, 0x7f, 0xba, 0xf0, 0xf6, 0x43, 0xb4, 0x64, 0x71, 0x99, 0x32, 0xbb, 0x0f, 0x3b,
	0x3c, 0x1e, 0x81, 0x09, 0xf0, 0x6e, 0x82, 0x0e, 0x8f, 0xed, 0x4f, 0x10, 0x4a, 0x45, 0x0b, 0xb5,
	0xa8, 0xa9, 0x51, 0x67, 0x02, 0xbc, 0xde, 0x6c, 0x8c, 0x8d, 0x12, 0xb7, 0x4a, 0xfc, 0xb1, 0x55,
	0xce, 0x5f, 0x6c, 0xf7, 0x8e, 0xf5, 0x77, 0xef, 0x3c, 0x5e, 0xd3, 0x2c, 0x7d, 0xe5, 0x9e, 0x59,
	0x77, 0x73, 0x70, 0x40, 0xf0, 0x50, 0x6f, 0xd4, 0xe3, 0x76, 0x00, 0x6f, 0x59, 0x1e, 0x1b, 0x6f,
	0xf7, 0xaa, 0xf7, 0x79, 0xe3, 0x1d, 0x18, 0x6f, 0x4b, 0x1a, 0xeb, 0x03, 0x96, 0xc7, 0xda, 0xf9,
	0x1d, 0xc0, 0x47, 0x4a, 0x28, 0x9a, 0x2e, 0x68, 0x26, 0xca, 0x5c, 0x8d, 0x6e, 0x26, 0x5d, 0xaf,
	0x37, 0x7b, 0x86, 0x4d, 0x73, 0xb8, 0x6e, 0x0e, 0x37, 0xcd, 0xe1, 0x37, 0x82, 0xe7, 0xf3, 0xb7,
	0x8d, 0xf7, 0x89, 0xf1, 0x5e, 0xc2, 0xee, 0xcf, 0x83, 0xe3, 0x25, 0x5c, 0xd5, 0x07, 0x11, 0x89,
	0x8c, 0x34, 0xed, 0x9b, 0xc7, 0x54, 0xc6, 0x5f, 0x89, 0x5a, 0xaf, 0x98, 0xd4, 0x1e, 0x19, 0xf4,
	0x34, 0xfa, 0x5a, 0x93, 0xf6, 0x0f, 0x00, 0x07, 0x05, 0x4b, 0x19, 0x95, 0x2c, 0x6e, 0xa3, 0xdc,
	0xbb, 0x16, 0xe5, 0x7d, 0x13, 0x65, 0x68, 0xa2, 0xfc, 0xc7, 0xdf, 0x2d, 0x4d, 0xbf, 0xa5, 0x4d,
	0xa0, 0xf9, 0xbb, 0xed, 0x11, 0x81, 0xdd, 0x11, 0x81, 0xdf, 0x47, 0x04, 0x36, 0x27, 0x64, 0xed,
	0x4e, 0xc8, 0xfa, 0x75, 0x42, 0xd6, 0x67, 0x72, 0xe1, 0xac, 0xef, 0xdd, 0x54, 0x97, 0x1f, 0x89,
	0x94, 0x2c, 0xcb, 0x90, 0x7c, 0xbb, 0xbc, 0xa6, 0xfa, 0x07, 0xe1, 0x7d, 0x3d, 0xf0, 0xf2, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x28, 0xec, 0xd5, 0xe1, 0xc6, 0x02, 0x00, 0x00,
}

func (m *Schedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Schedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Schedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReleasedAmount) > 0 {
		for iNdEx := len(m.ReleasedAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReleasedAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TotalAmount) > 0 {
		for iNdEx := len(m.TotalAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStore(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintStore(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintStore(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintStore(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStore(dAtA []byte, offset int, v uint64) int {
	offset -= sovStore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Schedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStore(uint64(m.Id))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovStore(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovStore(uint64(l))
	if len(m.TotalAmount) > 0 {
		for _, e := range m.TotalAmount {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	if len(m.ReleasedAmount) > 0 {
		for _, e := range m.ReleasedAmount {
			l = e.Size()
			n += 1 + l + sovStore(uint64(l))
		}
	}
	return n
}

func sovStore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStore(x uint64) (n int) {
	return sovStore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Schedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Schedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Schedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalAmount = append(m.TotalAmount, types.Coin{})
			if err := m.TotalAmount[len(m.TotalAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleasedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleasedAmount = append(m.ReleasedAmount, types.Coin{})
			if err := m.ReleasedAmount[len(m.ReleasedAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStore = fmt.Errorf("proto: unexpected end of group")
)
